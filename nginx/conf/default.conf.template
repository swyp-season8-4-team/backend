# 변수 매핑 - 요청 시 동적으로 처리할 헤더를 안정적으로 지정
map $cookie_deviceId $device_id {
    default $cookie_deviceId;
    ""      "";
}

map $http_authorization $auth_header {
    default $http_authorization;
    ""      "";
}

server {
    listen 443 ssl;
    server_name ${SERVER_NAME};

    # SSL 인증서 설정
    ssl_certificate /etc/letsencrypt/live/${SERVER_NAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${SERVER_NAME}/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # API 문서 접근 리다이렉트 예시
    location = /api-docs/ {
        return 301 /api-docs;
    }

    # 모든 요청 처리
    location / {
        proxy_pass http://app:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 커스텀 헤더 설정
        proxy_set_header X-Device-ID $device_id;
        proxy_set_header Authorization $auth_header;

        # CORS 처리
        set $cors_origin "";
        if ($http_origin ~* "(https://desserbee.com|https://www.desserbee.com|http://desserbee.com|http://www.desserbee.com|https://${SERVER_NAME}|https://frontend-desserbee-web-git-vercel-test-eepyzs-projects.vercel.app|https://www.test.desserbee.com|https://test.desserbee.com)") {
            set $cors_origin $http_origin;
        }

        add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
        add_header 'Access-Control-Allow-Credentials' "true" always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, X-Email-Verification-Token, X-Device-ID' always;
        add_header 'Access-Control-Expose-Headers' 'Authorization, Set-Cookie, X-Email-Verification-Token' always;

        # OPTIONS 요청 사전 처리
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' "$cors_origin";
            add_header 'Access-Control-Allow-Credentials' "true";
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, X-Email-Verification-Token, X-Device-ID';
            add_header 'Access-Control-Expose-Headers' 'Authorization, Set-Cookie, X-Email-Verification-Token';
            add_header 'Access-Control-Max-Age' 3600;
            return 204;
        }
    }
}

# HTTP → HTTPS 리디렉션
server {
    listen 80;
    server_name ${SERVER_NAME};

    location / {
        return 301 https://$host$request_uri;
    }
}
