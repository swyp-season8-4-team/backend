name: Deploy DesserBee Application

on:
  push:
    branches: [main, release]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/desserbee

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      # 1. 코드 체크아웃 및 빌드
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "gradle"

      - name: Build with Gradle
        run: ./gradlew build -x test

      # 2. Docker 이미지 빌드 및 푸시
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

      # 3. 배포 환경 설정
      - name: Set deployment variables
        id: vars
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENV_VALUE<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.ENV_PROD }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "EC2_HOST_VALUE=${{ secrets.EC2_HOST }}" >> $GITHUB_ENV
            echo "SERVER_NAME=api.desserbee.com" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/release" ]; then
            echo "ENV_VALUE<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.ENV_RELEASE }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "EC2_HOST_VALUE=${{ secrets.EC2_HOST_RELEASE }}" >> $GITHUB_ENV
            echo "SERVER_NAME=release.desserbee.com" >> $GITHUB_ENV
          fi

      # 4. 통합 배포 및 검증
      - name: Deploy and verify
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST_VALUE }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # 배포 스크립트 다운로드 및 실행
            cd /home/ec2-user/app

            # 필수 파일만 다운로드
            curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/docker-compose.yml -o docker-compose.yml
            curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/scripts/deploy-application.sh -o scripts/deploy-application.sh
            curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/scripts/health-check.sh -o scripts/health-check.sh
            curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/scripts/setup-system.sh -o scripts/setup-system.sh

            # 실행 권한 부여
            chmod +x scripts/*.sh

            # 시스템 환경 설정
            ./scripts/setup-system.sh

            # 애플리케이션 배포
            ./scripts/deploy-application.sh "${{ env.ENV_VALUE }}" ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_TOKEN }} ${{ env.SERVER_NAME }}

            # 배포 상태 확인 (서비스 + HTTPS + SSL)
            echo "=== 배포 상태 종합 확인 ==="
            ./scripts/health-check.sh all 60
            ./scripts/health-check.sh https ${{ env.SERVER_NAME }} 30
            ./scripts/health-check.sh ssl ${{ env.SERVER_NAME }}
