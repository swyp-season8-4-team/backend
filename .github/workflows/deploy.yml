name: Deploy DesserBee Application

on:
  push:
    branches: [ main, release ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    # 작업 실행 환경 : 깃허브에서 빌드하고 자르파일만 넣기 위함입니다~
    runs-on: ubuntu-latest

    steps:

      # GitHub 저장소 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # Java 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      # gradlew에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 푸시를 위한 Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/desserbee:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/desserbee:${{ github.sha }}

      # 배포 환경 결정
      - name: Set deployment variables
        id: vars
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENV_VALUE<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.ENV_PROD }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "EC2_HOST_VALUE=${{ secrets.EC2_HOST }}" >> $GITHUB_ENV
            echo "SERVER_NAME=api.desserbee.com" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/release" ]; then
            echo "ENV_VALUE<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.ENV_RELEASE }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "EC2_HOST_VALUE=${{ secrets.EC2_HOST_RELEASE }}" >> $GITHUB_ENV
            echo "SERVER_NAME=release.desserbee.com" >> $GITHUB_ENV
          fi

      # docker-compose 파일과 Nginx 설정을 EC2 인스턴스로 전송
      - name: Transfer files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST_VALUE }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "docker-compose.yml,nginx/,ssl/"
          target: "/home/ec2-user/app"
          strip_components: 0
          overwrite: true

        # EC2에 SSH 접속 후 Docker 환경 구성 및 애플리케이션 실행
      - name: Deploy to EC2 and run Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST_VALUE }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Docker 설치 (Amazon Linux 2023 방식)
            if ! command -v docker &> /dev/null; then
              sudo dnf update -y
              sudo dnf install docker -y
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ec2-user
              # 그룹 적용
              newgrp docker || true
            fi

            # Docker Compose 설치
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            fi

            cd /home/ec2-user/app

            # .env 파일 작성
            printf "%b\n" "${{ env.ENV_VALUE }}" > .env
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
            echo "SERVER_NAME=${{ env.SERVER_NAME }}" >> .env
            
            # Nginx 설정 파일 생성 (템플릿에서 서버 이름 변수 치환)
            mkdir -p nginx/conf
            cat nginx/conf/default.conf.template | sed "s/\${SERVER_NAME}/${{ env.SERVER_NAME }}/g" > nginx/conf/default.conf
            
            # SSL 설정 실행 권한 부여
            chmod +x ssl/setup-ssl.sh ssl/renew-ssl.sh
            
            # Docker Hub 로그인
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # Docker 이미지 pull 및 Compose 실행
            echo "Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/desserbee:latest

            echo "Stopping existing containers..."
            docker-compose down || true

            # SSL 인증서 초기 설정 (인증서가 없는 경우에만)
            if [ ! -d "/etc/letsencrypt/live/${{ env.SERVER_NAME }}" ]; then
              echo "Setting up SSL certificate for the first time..."
              ./ssl/setup-ssl.sh ${{ env.SERVER_NAME }}
            fi

            echo "Starting containers with Docker Compose..."
            docker-compose up -d

            # SSL 자동 갱신 cron job 설정
            ./ssl/renew-ssl.sh setup-cron

            echo "Deployment completed at $(date) for branch ${{ github.ref_name }}"