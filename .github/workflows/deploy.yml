name: Deploy DesserBee Application

on:
  push:
    branches: [ main, release ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃 및 빌드
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      # 2. Docker 이미지 빌드 및 푸시
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/desserbee:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/desserbee:${{ github.sha }}

      # 3. 배포 환경 설정
      - name: Set deployment variables
        id: vars
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "ENV_VALUE<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.ENV_PROD }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "EC2_HOST_VALUE=${{ secrets.EC2_HOST }}" >> $GITHUB_ENV
            echo "SERVER_NAME=api.desserbee.com" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/release" ]; then
            echo "ENV_VALUE<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.ENV_RELEASE }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "EC2_HOST_VALUE=${{ secrets.EC2_HOST_RELEASE }}" >> $GITHUB_ENV
            echo "SERVER_NAME=release.desserbee.com" >> $GITHUB_ENV
          fi

      # 4. 파일 전송
      - name: Transfer files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST_VALUE }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "docker-compose.yml,nginx/,ssl/,scripts/"
          target: "/home/ec2-user/app"
          strip_components: 0
          overwrite: true

      # 5. 시스템 환경 설정
      - name: Setup System Environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST_VALUE }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user/app
            chmod +x scripts/setup-system.sh
            ./scripts/setup-system.sh

      # 6. SSL 인증서 설정
      - name: Setup SSL Certificate
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST_VALUE }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user/app
            chmod +x scripts/setup-ssl-deployment.sh
            ./scripts/setup-ssl-deployment.sh ${{ env.SERVER_NAME }}

      # 7. 애플리케이션 배포
      - name: Deploy Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST_VALUE }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user/app
            chmod +x scripts/deploy-application.sh
            ./scripts/deploy-application.sh "${{ env.ENV_VALUE }}" ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_TOKEN }} ${{ env.SERVER_NAME }}

      # 8. SSL 자동 갱신 설정
      - name: Setup SSL Auto Renewal
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST_VALUE }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user/app
            chmod +x scripts/setup-ssl-renewal.sh
            ./scripts/setup-ssl-renewal.sh

      # 9. 배포 상태 확인
      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST_VALUE }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user/app
            chmod +x scripts/verify-deployment.sh
            ./scripts/verify-deployment.sh ${{ env.SERVER_NAME }} ${{ github.ref_name }}